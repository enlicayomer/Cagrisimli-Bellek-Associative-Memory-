// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "05/07/2016 15:56:48"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    mainProject
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module mainProject_vlg_sample_tst(
	Ad0,
	Ad1,
	ara,
	clock,
	G,
	input0,
	input1,
	oku,
	yaz,
	yukleA,
	yukleK,
	sampler_tx
);
input  Ad0;
input  Ad1;
input  ara;
input  clock;
input  G;
input  input0;
input  input1;
input  oku;
input  yaz;
input  yukleA;
input  yukleK;
output sampler_tx;

reg sample;
time current_time;
always @(Ad0 or Ad1 or ara or clock or G or input0 or input1 or oku or yaz or yukleA or yukleK)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module mainProject_vlg_check_tst (
	cikis0,
	cikis1,
	OAd0,
	OAd1,
	var,
	sampler_rx
);
input  cikis0;
input  cikis1;
input  OAd0;
input  OAd1;
input  var;
input sampler_rx;

reg  cikis0_expected;
reg  cikis1_expected;
reg  OAd0_expected;
reg  OAd1_expected;
reg  var_expected;

reg  cikis0_prev;
reg  cikis1_prev;
reg  OAd0_prev;
reg  OAd1_prev;
reg  var_prev;

reg  cikis0_expected_prev;
reg  cikis1_expected_prev;
reg  OAd0_expected_prev;
reg  OAd1_expected_prev;
reg  var_expected_prev;

reg  last_cikis0_exp;
reg  last_cikis1_exp;
reg  last_OAd0_exp;
reg  last_OAd1_exp;
reg  last_var_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:5] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 5'b1;
end

// update real /o prevs

always @(trigger)
begin
	cikis0_prev = cikis0;
	cikis1_prev = cikis1;
	OAd0_prev = OAd0;
	OAd1_prev = OAd1;
	var_prev = var;
end

// update expected /o prevs

always @(trigger)
begin
	cikis0_expected_prev = cikis0_expected;
	cikis1_expected_prev = cikis1_expected;
	OAd0_expected_prev = OAd0_expected;
	OAd1_expected_prev = OAd1_expected;
	var_expected_prev = var_expected;
end



// expected cikis0
initial
begin
	cikis0_expected = 1'bX;
end 

// expected cikis1
initial
begin
	cikis1_expected = 1'bX;
end 

// expected OAd0
initial
begin
	OAd0_expected = 1'bX;
end 

// expected OAd1
initial
begin
	OAd1_expected = 1'bX;
end 

// expected var
initial
begin
	var_expected = 1'bX;
end 
// generate trigger
always @(cikis0_expected or cikis0 or cikis1_expected or cikis1 or OAd0_expected or OAd0 or OAd1_expected or OAd1 or var_expected or var)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected cikis0 = %b | expected cikis1 = %b | expected OAd0 = %b | expected OAd1 = %b | expected var = %b | ",cikis0_expected_prev,cikis1_expected_prev,OAd0_expected_prev,OAd1_expected_prev,var_expected_prev);
	$display("| real cikis0 = %b | real cikis1 = %b | real OAd0 = %b | real OAd1 = %b | real var = %b | ",cikis0_prev,cikis1_prev,OAd0_prev,OAd1_prev,var_prev);
`endif
	if (
		( cikis0_expected_prev !== 1'bx ) && ( cikis0_prev !== cikis0_expected_prev )
		&& ((cikis0_expected_prev !== last_cikis0_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port cikis0 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", cikis0_expected_prev);
		$display ("     Real value = %b", cikis0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_cikis0_exp = cikis0_expected_prev;
	end
	if (
		( cikis1_expected_prev !== 1'bx ) && ( cikis1_prev !== cikis1_expected_prev )
		&& ((cikis1_expected_prev !== last_cikis1_exp) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port cikis1 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", cikis1_expected_prev);
		$display ("     Real value = %b", cikis1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_cikis1_exp = cikis1_expected_prev;
	end
	if (
		( OAd0_expected_prev !== 1'bx ) && ( OAd0_prev !== OAd0_expected_prev )
		&& ((OAd0_expected_prev !== last_OAd0_exp) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OAd0 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OAd0_expected_prev);
		$display ("     Real value = %b", OAd0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_OAd0_exp = OAd0_expected_prev;
	end
	if (
		( OAd1_expected_prev !== 1'bx ) && ( OAd1_prev !== OAd1_expected_prev )
		&& ((OAd1_expected_prev !== last_OAd1_exp) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OAd1 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OAd1_expected_prev);
		$display ("     Real value = %b", OAd1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_OAd1_exp = OAd1_expected_prev;
	end
	if (
		( var_expected_prev !== 1'bx ) && ( var_prev !== var_expected_prev )
		&& ((var_expected_prev !== last_var_exp) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port var :: @time = %t",  $realtime);
		$display ("     Expected value = %b", var_expected_prev);
		$display ("     Real value = %b", var_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_var_exp = var_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module mainProject_vlg_vec_tst();
// constants                                           
// general purpose registers
reg Ad0;
reg Ad1;
reg ara;
reg clock;
reg G;
reg input0;
reg input1;
reg oku;
reg yaz;
reg yukleA;
reg yukleK;
// wires                                               
wire cikis0;
wire cikis1;
wire OAd0;
wire OAd1;
wire var;

wire sampler;                             

// assign statements (if any)                          
mainProject i1 (
// port map - connection between master ports and signals/registers   
	.Ad0(Ad0),
	.Ad1(Ad1),
	.ara(ara),
	.cikis0(cikis0),
	.cikis1(cikis1),
	.clock(clock),
	.G(G),
	.input0(input0),
	.input1(input1),
	.OAd0(OAd0),
	.OAd1(OAd1),
	.oku(oku),
	.\var (var),
	.yaz(yaz),
	.yukleA(yukleA),
	.yukleK(yukleK)
);

// Ad0
initial
begin
	Ad0 = 1'b1;
	# 80000;
	repeat(5)
	begin
		Ad0 = 1'b0;
		Ad0 = #80000 1'b1;
		# 80000;
	end
	Ad0 = 1'b0;
	Ad0 = #80000 1'b1;
end 

// Ad1
initial
begin
	Ad1 = 1'b1;
	# 80000;
	repeat(5)
	begin
		Ad1 = 1'b0;
		Ad1 = #80000 1'b1;
		# 80000;
	end
	Ad1 = 1'b0;
	Ad1 = #80000 1'b1;
end 

// ara
initial
begin
	ara = 1'b0;
end 

// clock
initial
begin
	clock = 1'b1;
	# 80000;
	repeat(5)
	begin
		clock = 1'b0;
		clock = #80000 1'b1;
		# 80000;
	end
	clock = 1'b0;
	clock = #80000 1'b1;
end 

// G
initial
begin
	G = 1'b1;
	# 80000;
	repeat(5)
	begin
		G = 1'b0;
		G = #80000 1'b1;
		# 80000;
	end
	G = 1'b0;
	G = #80000 1'b1;
end 

// input0
initial
begin
	input0 = 1'b1;
end 

// input1
initial
begin
	input1 = 1'b1;
end 

// oku
initial
begin
	oku = 1'b0;
end 

// yaz
initial
begin
	yaz = 1'b0;
end 

// yukleA
initial
begin
	yukleA = 1'b1;
end 

// yukleK
initial
begin
	yukleK = 1'b0;
end 

mainProject_vlg_sample_tst tb_sample (
	.Ad0(Ad0),
	.Ad1(Ad1),
	.ara(ara),
	.clock(clock),
	.G(G),
	.input0(input0),
	.input1(input1),
	.oku(oku),
	.yaz(yaz),
	.yukleA(yukleA),
	.yukleK(yukleK),
	.sampler_tx(sampler)
);

mainProject_vlg_check_tst tb_out(
	.cikis0(cikis0),
	.cikis1(cikis1),
	.OAd0(OAd0),
	.OAd1(OAd1),
	.var(var),
	.sampler_rx(sampler)
);
endmodule

